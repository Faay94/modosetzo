# Ultroid - UserBot
# Copyright (C) 2021 TeamUltroid
#
# This file is a part of < https://github.com/TeamUltroid/Ultroid/ >
# PLease read the GNU Affero General Public License in
# <https://www.github.com/TeamUltroid/Ultroid/blob/main/LICENSE/>.

from . import *

START = """
ðŸª… **MenÃº Ayuda** ðŸª…

âœ˜  /start : Comprueba que estoy vivo o no.
âœ˜  /help : Recibe este mensaje.
"""

ADMINTOOLS = """âœ˜ **AdminTools** âœ˜

â€¢ /pin : Ancla el mensaje respondido
â€¢ /pinned : Obtener mensaje anclado en el chat.
â€¢ /unpin : Desanclar el mensaje respondido
â€¢ /unpin all : Desanclar todos los mensajes anclados.

â€¢ /ban (username/id/reply) : Prohibir al usuario
â€¢ /unban (username/id/reply) : Anular la prohibiciÃ³n del usuario.

â€¢ /mute (username/id/reply) : Silenciar al usuario.
â€¢ /unmute (username/id/reply) : Activar el silencio del usuario.

â€¢ /tban (username/id/reply) (time) : ProhibiciÃ³n temporal 
â€¢ /tmute (username/id/reply) (time) : Temporal silencia un usuario.

â€¢ /purge (purge messages)

â€¢ /setgpic (reply photo) : mantener la foto de chat del grupo.
â€¢ /delgpic : eliminar la foto de chat actual."""

UTILITIES = """
âœ˜ ** Utilities ** âœ˜

â€¢ /info (reply/username/id) : ObtÃ©n la info .
â€¢ /id : obtÃ©n chat/user id.
â€¢ /tr : traduce ..

â€¢ /paste (reply file/text) : pega texto en  Spaceb.in
â€¢ /meaning (text) : xd .
â€¢ /google (query) : busca en Google ..

â€¢ /suggest (query/reply) : crea una Yes / No encuesta .
"""

LOCKS = """
âœ˜ ** Locks ** âœ˜

â€¢ /lock (query) : bloquean contenido .
â€¢ /unlock (query) : desbloquea contenido .

â€¢ All Queries
- `msgs` : for mensajes.
- `inlines` : for xd.
- `media` : for all medias.
- `games` : for games.
- `sticker` : for stickers.
- `polls` : for polls.
- `gif` : for gifs.
- `pin` : for pins.
- `changeinfo` : for change info right.
"""

MISC = """
âœ˜  **Misc**  âœ˜

â€¢ /joke : Get Random Jokes.
â€¢ /decide : Decide Something..
"""

STRINGS = {"Admintools": ADMINTOOLS, "locks": LOCKS, "Utils": UTILITIES, "Misc": MISC}

MNGE = udB.get("MNGR_EMOJI") or "â€¢"


def get_buttons():
    BTTS = []
    keys = STRINGS.copy()
    while keys:
        BT = []
        for i in list(keys)[:2]:
            text = MNGE + " " + i + " " + MNGE
            BT.append(Button.inline(text, "hlp_" + i))
            del keys[i]
        BTTS.append(BT)
    url = "https://t.me/" + asst.me.username + "?startgroup=true"
    BTTS.append([Button.url("Agregame", url)])
    return BTTS


@asst_cmd(pattern="help")
async def helpish(event):
    if not event.is_private:
        url = f"https://t.me/{asst.me.username}?start=start"
        return await event.reply(
            "Contactame en pv", buttons=Button.url("Click", url)
        )
    if str(event.sender_id) in owner_and_sudos() and (
        udB.get("DUAL_MODE") and (udB.get("DUAL_HNDLR") == "/")
    ):
        return
    BTTS = get_buttons()
    await event.reply(START, buttons=BTTS)


@callback("mngbtn", owner=True)
async def ehwhshd(e):
    buttons = get_buttons()
    buttons.append([Button.inline("<< Volver", "Abierto")])
    await e.edit(buttons=buttons)


@callback("mnghome")
async def home_aja(e):
    await e.edit(START, buttons=get_buttons())


@callback(re.compile("hlp_(.*)"))
async def do_something(event):
    match = event.pattern_match.group(1).decode("utf-8")
    await event.edit(STRINGS[match], buttons=Button.inline("<< Back", "mnghome"))
